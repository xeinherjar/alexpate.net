<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Pate</title>
    <description>Where I can wax poetically about programming.
</description>
    <link>http://alexpate.net/</link>
    <atom:link href="http://alexpate.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 11 Feb 2015 15:20:49 -0500</pubDate>
    <lastBuildDate>Wed, 11 Feb 2015 15:20:49 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Week Five of The Iron Yard</title>
        <description>&lt;h1 id=&quot;ajax--iife--prototypes--ruby&quot;&gt;ajax | IIFE | Prototypes | Ruby&lt;/h1&gt;

&lt;p&gt;Week Five.&lt;/p&gt;

&lt;p&gt;We had our first drop this week.  I hope its not the start of a new trend.&lt;/p&gt;

&lt;h2 id=&quot;iife---immediately-invoked-function-expression&quot;&gt;IIFE - Immediately Invoked Function Expression&lt;/h2&gt;
&lt;p&gt;JavaScript lacks a native module/import system and is okay with polluting the global name space.  IIFE is a technique that allows us to get some of the benefits of a module system and helps us keep state private.  By wrapping your function in a closure you get to lock your private state/properties/methods away and control how you affect the larger scope of your environment.&lt;/p&gt;

&lt;p&gt;For me learning about this was wonderful.  It helped to cement what closures, scopes, and environments really are and how you can abuse them to create some clever answers to a few problems that JavaScript creates.&lt;/p&gt;

&lt;h2 id=&quot;prototypes&quot;&gt;Prototypes&lt;/h2&gt;
&lt;p&gt;I don’t have much to say about prototypes.  Prototypes are how JavaScript handles inheritance and so far they seem fairly straight forward.  However I’m sure that is inexperience talking.  Much of what I’ve read online points to people not having an understanding of how prototypes work.  They can be overwritten, they don’t exists on the object itself but the object has access to it because its on the object’s prototype object and it walks backwards down the chain until it finds it or it fails to find it on the root object.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;
&lt;p&gt;We had a guest lecture from the Ruby on Rails instructor, to say it was great would be an understatement.  He live coded a hangman game, showed off some of Ruby’s built ins and covered the basics of http routes and some general back-end stuff.  I was particularly struck by some of the nice built in methods that Ruby has.  It has started to really make me think about the differences between the ‘batteries included’ languages/runtimes like Python, Ruby and C# and the more bring it in as needed/we love libraries languages like JavaScript, Golang, and C.&lt;/p&gt;

&lt;p&gt;I only have some passing familiarity with the above languages but I think its interesting as this appears to be a common dynamic that I’ve noticed in my research.  Some people love having everything built in, and others want to build it themselves or bring want to bring it in only when needed.  I can see the appeal of both camps, but I’m leaning towards the bring it in only if needed.&lt;/p&gt;

&lt;h2 id=&quot;final-project&quot;&gt;Final Project&lt;/h2&gt;
&lt;p&gt;As we are nearing the halfway point, week six, I need to start narrowing down my final project ideas.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Feb 2015 08:54:12 -0500</pubDate>
        <link>http://alexpate.net/tiy/2015/02/11/Week-05-TiY.html</link>
        <guid isPermaLink="true">http://alexpate.net/tiy/2015/02/11/Week-05-TiY.html</guid>
        
        
        <category>tiy</category>
        
      </item>
    
      <item>
        <title>Week Three and Four of The Iron Yard</title>
        <description>&lt;h1 id=&quot;javascript--jquery--team-projects&quot;&gt;JavaScript | jQuery | Team Projects&lt;/h1&gt;

&lt;h2 id=&quot;week-three&quot;&gt;Week three.&lt;/h2&gt;

&lt;p&gt;Week three was a short week.  School was closed for MLK day.
We covered some more JavaScript and had a brief overview of jQuery.  More importantly we started working with build tools and production pipelines, i.e. Gulp, NPM, and Bower.
As for work we had to recreate the &lt;a href=&quot;http://xeinherjar.github.io/etsy-frontpage-clone/&quot;&gt;Etsy search page&lt;/a&gt; and create an accordion.&lt;/p&gt;

&lt;h2 id=&quot;week-four&quot;&gt;Week four.&lt;/h2&gt;

&lt;p&gt;Week four we started getting into libraries like &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore&lt;/a&gt;/&lt;a href=&quot;http://lodash.com/&quot;&gt;lodash&lt;/a&gt;.  Mainly it was being used as a gentle introduction to templates.  Our start of the week project was to recreate our &lt;a href=&quot;http://xeinherjar.github.io/github-frontpage-clone/&quot;&gt;Github Repo page&lt;/a&gt;.
Next up was RESTful apis and Responsive Web Design.  With all of that under our belts we started work on the dreaded group project.&lt;/p&gt;

&lt;h2 id=&quot;group-projects&quot;&gt;Group Projects&lt;/h2&gt;

&lt;p&gt;I wonder how many people actively like group projects?&lt;/p&gt;

&lt;p&gt;But we all know the downsides, so lets focus on the good parts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project Management&lt;/li&gt;
  &lt;li&gt;Git work flow&lt;/li&gt;
  &lt;li&gt;Git conflicts&lt;/li&gt;
  &lt;li&gt;Trust &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We used &lt;a href=&quot;http://trello.com&quot;&gt;Trello&lt;/a&gt; for our project managment.  Our process was pretty simple.  Three lanes: backlog, in progress, and complete.  We defined our tasks and assigned them.  Then they just work across the screen.  This gave us a really good visual into who was doing what, when it was being done and how long it took to complete.&lt;/p&gt;

&lt;p&gt;Our Git work flow was master -&amp;gt; staging -&amp;gt; local-dev.  We kept Master as our gold copy and was only pushed when it was in working order.  All of our conflicts were fixed in local branches before being pushed into staging.  We are a group of front-end people so we had to work in the same files, and that made it tricky.  We set our HTML structure as a group before we went off on our own to help reduce conflicts.  In general it went pretty smooth, only one person was allowed to edit index.html at a time.  We each had our own JavaScript and SASS files.  Just had to pay attention to the order they were imported.&lt;/p&gt;

&lt;p&gt;Another big win for us was trust.  Knowing that something will be delivered when a team mate says it will is a huge boon. It reduces a lot of frustrations and stress that accompanies most group projects.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Feb 2015 09:15:27 -0500</pubDate>
        <link>http://alexpate.net/tiy/2015/02/01/Week-03-04-TiY.html</link>
        <guid isPermaLink="true">http://alexpate.net/tiy/2015/02/01/Week-03-04-TiY.html</guid>
        
        
        <category>tiy</category>
        
      </item>
    
      <item>
        <title>Week Two of The Iron Yard</title>
        <description>&lt;h1 id=&quot;git--sass--javascript&quot;&gt;Git | SASS | JavaScript&lt;/h1&gt;

&lt;p&gt;Week two.&lt;/p&gt;

&lt;h2 id=&quot;automate-it&quot;&gt;Automate it.&lt;/h2&gt;
&lt;p&gt;We use Git for our version control and every project we do needs to be under version control.&lt;/p&gt;

&lt;p&gt;Two projects a day.  One for learning and one for homework.  Each project requires us to create git repo, setup our files and push to GitHub.  Its not a lot of work, about 8 or 9 commands and quick trip to GitHub to setup the remote repo.  I was a sys admin.  One thing you learn quickly as a sys admin, if you do something multiple times then automate when you can.&lt;/p&gt;

&lt;p&gt;I wrote a quick shell script to help with this.  This was not class work but I feel like it was great thing to spend some time on.  It is pretty simple, copy some files, make some directories, init a local git repo, and the best part: set up the remote repo on GitHub.  8 commands vs 1.  Plus I got to interact with their API.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/xeinherjar/f72c79dfc9df7887f6d8.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Right now it is just a shell script, but …&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;We have finally arrived a JavaScript.  I understand why we had to spend time with CSS and HTML, but it feels good to have moved on JavaScript.  So far it has been straight forward, syntax, built in methods, and the DOM.  Now that we know some CSS, HTML, JS and how to interact with the DOM we have been building small interactive pages.&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together.&lt;/h2&gt;
&lt;p&gt;I thought it would be a good weekend project to work on a command line tool to help interact with GitHub.  We are learning JavaScript, so why not start with node? I’ve decided to go through the exercises at &lt;a href=&quot;http://nodeschool.io&quot;&gt;nodeschool.io&lt;/a&gt; before I take a real stab at it.&lt;/p&gt;

&lt;p&gt;During my research I found: &lt;a href=&quot;https://hub.github.com&quot;&gt;Hub&lt;/a&gt;, which is the offical GitHub command line tool.
Since I don’t want to recreate Hub, I’m thinking I could just wrap a few of GitHub’s api calls with our school’s workflow just to make things happen a bit faster.
However once we get to task runners like &lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt&lt;/a&gt; and &lt;a href=&quot;http://gulpjs.com&quot;&gt;Gulp&lt;/a&gt; they may displace it.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Jan 2015 13:39:48 -0500</pubDate>
        <link>http://alexpate.net/tiy/2015/01/18/Week-02-TiY.html</link>
        <guid isPermaLink="true">http://alexpate.net/tiy/2015/01/18/Week-02-TiY.html</guid>
        
        
        <category>tiy</category>
        
      </item>
    
      <item>
        <title>Getting up to speed with Vim</title>
        <description>&lt;h1 id=&quot;why-vim&quot;&gt;Why Vim?&lt;/h1&gt;

&lt;p&gt;It’s ubiquitous.&lt;br /&gt;
I don’t have to leave my terminal.&lt;br /&gt;
I can customize it. &lt;/p&gt;

&lt;p&gt;But also because it is a new tool.  As a developer, it seems I will spend my time mostly doing the following: thinking and typing.  I can’t control what I think with, but I have some control over my tools.&lt;/p&gt;

&lt;h2 id=&quot;navigation&quot;&gt;Navigation&lt;/h2&gt;
&lt;p&gt;Navigation has honestly been the most difficult part to get used to.
Arrow keys?  Apparently those are for amateurs.
I disabled the arrow keys to force myself to use the hjkl keys for navigation.  It’s a work in progress, but after the first hour or so, it’s not so bad.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; Disable Arrow keys in normal and insert modes&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;down&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;down&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;composability&quot;&gt;Composability&lt;/h2&gt;
&lt;p&gt;Vim’s commands are composable.&lt;/p&gt;

&lt;p&gt;This means you can take commands and use them together. &lt;code&gt;9&amp;lt;enter&amp;gt;&lt;/code&gt; moves down 9 lines.  &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; indents.  &lt;code&gt;9&amp;gt;&amp;gt;&lt;/code&gt; means indent 9 lines.  &lt;/p&gt;

&lt;p&gt;I know that &lt;code&gt;dd&lt;/code&gt; means delete a line so &lt;code&gt;9dd&lt;/code&gt; means delete 9 lines.  &lt;code&gt;gU&lt;/code&gt; means UPPERCASE.  Guess what &lt;code&gt;gU3&lt;/code&gt; does?  Correct, it UPPERCASES 3 lines.  If &lt;code&gt;w&lt;/code&gt; means select token then &lt;code&gt;gUw&lt;/code&gt; will UPPERCASE the entire word.  &lt;code&gt;dw&lt;/code&gt; will delete a word.&lt;/p&gt;

&lt;p&gt;Each new command greatly increases the amount of work Vim can do for me. &lt;strong&gt;That is what makes Vim exciting to learn for me.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also just a neat trick I learned earlier today:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:r !shellcmd&lt;/code&gt;, where shellcmd is some shell command, will pipe the command’s output into your current Vim buffer.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Jan 2015 13:00:00 -0500</pubDate>
        <link>http://alexpate.net/tiy/vim/2015/01/13/Why-Vim.html</link>
        <guid isPermaLink="true">http://alexpate.net/tiy/vim/2015/01/13/Why-Vim.html</guid>
        
        
        <category>tiy</category>
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Week One of The Iron Yard</title>
        <description>&lt;h1 id=&quot;html--css--what-is-your-name-again&quot;&gt;HTML | CSS | What is your name again?&lt;/h1&gt;

&lt;p&gt;I have just wrapped up week one at The Iron Yard.&lt;/p&gt;

&lt;h2 id=&quot;my-background-and-why-am-i-here&quot;&gt;My background and why am I here.&lt;/h2&gt;
&lt;p&gt;I’ve spent the last 8 or 9 years working in the legal vertical.  I spent 4.5 of those years working at &lt;a href=&quot;http://www.intelliteach.com&quot;&gt;Intelliteach&lt;/a&gt; providing help desk services for a multitude of law firms.  From there I went off to &lt;a href=&quot;http://docauto.com&quot;&gt;DocAuto, Inc.&lt;/a&gt; where I worked many positions.  I started with level 1 support and worked my way into Services.  After I found that services wasn’t for me I moved into a system administrator position.  Right before I left I was moved into dev where I spent time cleaning up our unit and integration tests.  While dev was the position I wanted, it came too late.  I was already promised to The Iron Yard.&lt;/p&gt;

&lt;p&gt;When I graduated high school I was of two minds.  Computer Science or Animation?
The recruiter for The Art Institute of Atlanta was much more convincing than the one from GA State.  So I went off to study animation for a few years.  While I loved my time at the Art Institute I knew when I graduated that computer animation wasn’t something I could do full time.&lt;/p&gt;

&lt;p&gt;Since graduation I’ve toyed with many programming languages and paradigms.  C, C++, C#, Python, Ruby, Haskell, Go, JavaScript and even Elixir.  While I’ve never done anything advanced with them I really enjoyed learning how they worked.  What I really needed though was some structure, and people I could talk to.  I just want to build things and The Iron Yard is giving me that opportunity.&lt;/p&gt;

&lt;h2 id=&quot;and-so-it-begins&quot;&gt;And so it begins.&lt;/h2&gt;
&lt;p&gt;Week one has been comprised of orientation, house keeping, HTML, CSS, forgetting names, forgetting CSS selectors and forgetting more names.&lt;/p&gt;

&lt;p&gt;I’m in the Front End Engineering class with 11 other students.
The daily schedule is standup, lecture, food, lab.
Friday is lab all day with an hour meeting with a subset of the cohort.  This forces you to hang out and interact with students that are not in your class.  I’m not very good at initiating conversations so I’m hoping this will help me build up these kinds of soft skills.  I’ve already meet a few of the kids in the Rails class and even a few previous students who have swung by the new building.&lt;/p&gt;

&lt;p&gt;Going in I was already familiar with HTML and CSS, but there is a difference between being able to tweak some CSS and to understand what it is actually doing. Once Tim, our instructor, explained the box model and block vs. inline display I was able to start making sense of some of the idiosyncrasies of CSS.&lt;/p&gt;

&lt;p&gt;The front end teacher in Tampa, &lt;a href=&quot;https://github.com/jisaacks&quot;&gt;JD&lt;/a&gt;, was our guest instructor on Thursday.  I thought it was great to have another perspective on the material.  He seemed to really know his stuff.  None of the questions we asked stumped him.&lt;/p&gt;

&lt;h2 id=&quot;reinforcement&quot;&gt;Reinforcement&lt;/h2&gt;
&lt;p&gt;I have found that one of the best ways to solidify my understanding of what we are learning is to explain it to someone else.  I’ve learned that if I can’t explain it with my own words then I don’t have a true understanding of the concept.  My goal here is to internalize everything and not just regurgitate the information.&lt;/p&gt;

&lt;h2 id=&quot;bikeshedding&quot;&gt;Bikeshedding&lt;/h2&gt;
&lt;p&gt;I’ve also spent a fair amount of time customizing my shell [zsh] and Vim.  While most of the other students are using Sublime Text, we have two hold outs.  One is using Atom and I’m using Vim.  While Vim appears to have a large learning curve I’m already being fairly productive.  I’m not near as fast as I was in Sublime Text but I think this will pay off in the end.&lt;/p&gt;

&lt;p&gt;Feel free to check out my &lt;a href=&quot;https://github.com/xeinherjar/dotfiles&quot;&gt;Dot files&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jan 2015 12:09:31 -0500</pubDate>
        <link>http://alexpate.net/tiy/2015/01/11/Week-01-TiY.html</link>
        <guid isPermaLink="true">http://alexpate.net/tiy/2015/01/11/Week-01-TiY.html</guid>
        
        
        <category>tiy</category>
        
      </item>
    
  </channel>
</rss>
